package marksix;
import java.io.*;
import javax.swing.JOptionPane;

public class MarkSix {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // declaration
        String randomNumberquestion;
        String firstNumber;
        String secondNumber;
        String thirdNumber;
        String fourthNumber;
        String fifthNumber;
        String sixthNumber;
        String numberOfSet;

        int [][]numberSet = new int[100][6];
        int [] newSet = new int[6]; 
        int randomNumber;
        int num;
        int menu1;
        boolean isRunning = false;
        boolean duplicate = false;
        
        int result = JOptionPane.showConfirmDialog(null, 
             "Do you want a self select number" ,null, JOptionPane.YES_NO_OPTION);
        num = 0;
        
        
        //input
       
     if(result == JOptionPane.YES_OPTION ){
        
         
         Object[] options = {"1","2","3","4","5","6"};
         int x = JOptionPane.showOptionDialog(null, "How many number do you perfer? Rest of Number would be generated by random",
                "Click a button",
                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
         menu1 = x+1;
        
         switch(menu1)
         {
             case 1:
                 
                 {
       

             // read in first number from user as a string
                    firstNumber = JOptionPane.showInputDialog( "Enter first integer");
                    newSet[0] = Integer.parseInt(firstNumber);  
                    break; 
             
                 }
             case 2:
                {
                 
                    firstNumber = JOptionPane.showInputDialog( "Enter first integer");
                    newSet[0] = Integer.parseInt(firstNumber);
                    secondNumber = JOptionPane.showInputDialog( "Enter Second integer");
                    newSet[1] = Integer.parseInt(secondNumber);           
                    break;          
                }
             case 3:   
             {
                    firstNumber = JOptionPane.showInputDialog( "Enter first integer");
                    newSet[0] = Integer.parseInt(firstNumber);
                    secondNumber = JOptionPane.showInputDialog( "Enter Second integer");
                    newSet[1] = Integer.parseInt(secondNumber);      
                    thirdNumber = JOptionPane.showInputDialog( "Enter Third integer");
                    newSet[2] = Integer.parseInt(thirdNumber);                   
                    break;                  
             }
             case 4:
             {
                    firstNumber = JOptionPane.showInputDialog( "Enter first integer");
                    newSet[0] = Integer.parseInt(firstNumber);
                    secondNumber = JOptionPane.showInputDialog( "Enter Second integer");
                    newSet[1] = Integer.parseInt(secondNumber);      
                    thirdNumber = JOptionPane.showInputDialog( "Enter Third integer");
                    newSet[2] = Integer.parseInt(thirdNumber); 
                    fourthNumber = JOptionPane.showInputDialog( "Enter Fourth integer");
                    newSet[3] = Integer.parseInt(fourthNumber);                    
                    break;              

             }
             case 5:
             {
                    firstNumber = JOptionPane.showInputDialog( "Enter first integer");
                    newSet[0] = Integer.parseInt(firstNumber);
                    secondNumber = JOptionPane.showInputDialog( "Enter Second integer");
                    newSet[1] = Integer.parseInt(secondNumber);      
                    thirdNumber = JOptionPane.showInputDialog( "Enter Third integer");
                    newSet[2] = Integer.parseInt(thirdNumber); 
                    fourthNumber = JOptionPane.showInputDialog( "Enter Fourth integer");
                    newSet[3] = Integer.parseInt(fourthNumber); 
                    fifthNumber = JOptionPane.showInputDialog( "Enter Fifth integer");
                    newSet[4] = Integer.parseInt(fifthNumber);                    
                    break;              
             
             }
             case 6:
             {
                    firstNumber = JOptionPane.showInputDialog( "Enter first integer");
                    newSet[0] = Integer.parseInt(firstNumber);
                    secondNumber = JOptionPane.showInputDialog( "Enter Second integer");
                    newSet[1] = Integer.parseInt(secondNumber);      
                    thirdNumber = JOptionPane.showInputDialog( "Enter Third integer");
                    newSet[2] = Integer.parseInt(thirdNumber); 
                    fourthNumber = JOptionPane.showInputDialog( "Enter Fourth integer");
                    newSet[3] = Integer.parseInt(fourthNumber); 
                    fifthNumber = JOptionPane.showInputDialog( "Enter Fifth integer");
                    newSet[4] = Integer.parseInt(fifthNumber);                    
                    sixthNumber = JOptionPane.showInputDialog( "Enter Sixth integer");
                    newSet[5] = Integer.parseInt(sixthNumber);                    
                    break;              
             
             }
                 
                 
         }
        
        
           try{

             if(newSet [0] == 0 && newSet [1] == 0 && newSet [2] == 0 && newSet [3] == 0 && newSet [4] == 0 && newSet [5] == 0){
                 throw new ArithmeticException();
             }
             
             if(newSet [0]>=50 || newSet [1]>=50 || newSet [2]>=50 || newSet [3]>=50 || newSet [4]>=50 || newSet [5]>=50){
                throw new ArrayIndexOutOfBoundsException();
                }
             if(newSet [0]<0 && newSet [1]<0 && newSet [2]<0 && newSet [3]<0 && newSet [4]<0 && newSet [5]<0 ){
                throw new NegativeNumberException();
                }
             if(newSet [0] >0 && newSet [0] <49 && newSet [1] >0 && newSet [1] <49
                     )
                  {
                        if(newSet [0] == newSet [1])
                                {
                                 throw new IllegalArgumentException();
                                 }
                       }                 
             if(newSet [0] >0 && newSet [0] <49 && newSet [1] >0 && newSet [1] <49 && newSet [2] >0 && newSet [2] <49
                     )
                  {
                        if(newSet [0] == newSet [1] || newSet [0] == newSet [2] || newSet [1] == newSet [2])
                                {
                                 throw new IllegalArgumentException();
                                 }
                       }             
             
             if(newSet [0] >0 && newSet [0] <49 && newSet [1] >0 && newSet [1] <49 && newSet [2] >0 && newSet [2] <49
                     && newSet [3] >0 && newSet [3] <49)
                  {
                        if(newSet [0] == newSet [1] || newSet [0] == newSet [2] || newSet [0] == newSet [3]
                             || newSet [1] == newSet [2]
                             || newSet [1] == newSet [3]
                             || newSet [2] == newSet [3]
                             )
                                {
                                 throw new IllegalArgumentException();
                                 }
                       }             
             
             if(newSet [0] >0 && newSet [0] <49 && newSet [1] >0 && newSet [1] <49 && newSet [2] >0 && newSet [2] <49
                     && newSet [3] >0 && newSet [3] <49 && newSet [4] >0 && newSet [4] <49)
                  {
                        if(newSet [0] == newSet [1] || newSet [0] == newSet [2] || newSet [0] == newSet [3]
                             || newSet [0] == newSet [4] || newSet [1] == newSet [2]
                             || newSet [1] == newSet [3] || newSet [1] == newSet [4]
                             || newSet [2] == newSet [3] || newSet [2] == newSet [4]
                             || newSet [3] == newSet [4])
                                {
                                 throw new IllegalArgumentException();
                                 }
                       }
             if(newSet [0] >0 && newSet [0] <49 && newSet [1] >0 && newSet [1] <49 && newSet [2] >0 && newSet [2] <49
                     && newSet [3] >0 && newSet [3] <49 && newSet [4] >0 && newSet [4] <49 && newSet [5] >0 && newSet [5] <49)
                  {
                        if(newSet [0] == newSet [1] || newSet [0] == newSet [2] || newSet [0] == newSet [3]
                             || newSet [0] == newSet [4] || newSet [0] == newSet [5] || newSet [1] == newSet [2]
                             || newSet [1] == newSet [3] || newSet [1] == newSet [4] || newSet [1] == newSet [5]
                             || newSet [2] == newSet [3] || newSet [2] == newSet [4] || newSet [2] == newSet [5]
                             || newSet [3] == newSet [4] || newSet [3] == newSet [5] || newSet [4] == newSet [5])
                                {
                                 throw new IllegalArgumentException();
                                 }
                       }
                   
                    }
                    catch(NumberFormatException  e) {
                       System.out.println("Integer please!");
                       return; 
                      }
                    catch(ArithmeticException e) 
                    {
                       System.out.println("Don't input zero!");
                       return; 
                       
                     }
                    catch(ArrayIndexOutOfBoundsException e) {
                       System.out.println("Not more than 50 please!");
                       return; 
                    }
                    catch(NegativeNumberException e) 
                       {
                       System.out.println("No negative number please!");
                       return;      
                      }
                     catch(IllegalArgumentException e) 
                    {
                       System.out.println("Number is same with the first enter number");
                       return; 
                    }
      if(menu1 <6){
       if(menu1 < 5){ 
        //ask number of sets to customer
           try{
             numberOfSet = JOptionPane.showInputDialog( "How many numbers of sets");
                 num = Integer.parseInt(numberOfSet);
  
              if(num == 0)
                {
                 throw new ArithmeticException();
                }
             
             if(num >=101)
                {
                throw new ArrayIndexOutOfBoundsException();
                }
             if(num< 0)
                {
                throw new NegativeNumberException();
                }
                     
                }
                    catch(NumberFormatException  e) 
                {
                       System.out.println("Integer please!");
                       return;
                }
                    catch(ArithmeticException e) {
                       System.out.println("Don't input zero!");
                       return;            
                }
                    catch(ArrayIndexOutOfBoundsException e) {
                       System.out.println("Not more than 100 please!");
                       return;
                }
                    catch(NegativeNumberException e) {
                       System.out.println("No negative number please!");
                       return;     
                }
        }       
       if(menu1 == 5){ 
        //ask number of sets to customer
           try{
             numberOfSet = JOptionPane.showInputDialog( "How many numbers of sets");
                 num = Integer.parseInt(numberOfSet);
  
              if(num == 0)
                {
                    throw new ArithmeticException();
                 }
             
             if(num >=49)
                {
                   throw new ArrayIndexOutOfBoundsException();
                   }
             if(num< 0)
                {
                   throw new NegativeNumberException();
                   }
                     
                }
           catch(NumberFormatException  e) 
                    {
                                System.out.println("Integer please!");
                                return;
                         }
           catch(ArithmeticException e) 
                    {
                                System.out.println("Don't input zero!");
                                return;            
                         }
           catch(ArrayIndexOutOfBoundsException e) 
                    {
                                System.out.println("Not more than 48 please!");
                                return;
                         }
           catch(NegativeNumberException e) 
                    {
                                System.out.println("No negative number please!");
                                return;     
                         }
       }
      
        
        //processing 
        for(int j=0; j<num ; j++){
         for (int i=menu1; i<6;i++ )
            {
            
            duplicate = false;
            //generate a number from 1-49
            randomNumber = generateRandomValue();
            
            // check whether the randomNumber exists i
            

            duplicate = checkDuplicate (newSet, randomNumber, i);
            
            
          
            if(duplicate == true)
                    {
                        i--;
                    }
            else
                    {
                        newSet [i] = randomNumber;
                    }
            
            if(duplicate == false)
                    {
                      numberSet[j][0] = newSet[0];
                      numberSet[j][1] = newSet[1];
                      numberSet[j][2] = newSet[2];
                      numberSet[j][3] = newSet[3];
                      numberSet[j][4] = newSet[4];
                      numberSet[j][i] = randomNumber;
                      }
                }
              }
         }
      else {
          num =1;
          for(int j=0; j<num ; j++)
                    {

                          numberSet[j][0] = newSet[0];
                          numberSet[j][1] = newSet[1];
                          numberSet[j][2] = newSet[2];
                          numberSet[j][3] = newSet[3];
                          numberSet[j][4] = newSet[4];
                          numberSet[j][5] = newSet[5]; 

                    }
         }
     }
         
        
     
       else{
       
       //ask number of sets for customer
       numberOfSet = JOptionPane.showInputDialog( "How many numbers of sets");
         num = Integer.parseInt(numberOfSet);
            
           
        for(int j=0;j<numberSet.length;j++)
            {
           for (int i=0; i<newSet.length;i++ )
                {
            duplicate = false;
            //generate a number from 1-49
            randomNumber = generateRandomValue();
            
            // check whether the randomNumber exists i
            

            duplicate = checkDuplicate (newSet, randomNumber, i);
            
            
          
            if(duplicate == true)
                    {
                        i--;
                     }
            else
                   {
                        newSet [i] = randomNumber;

                    }
            
            if(duplicate == false)
                       {
                          numberSet[j][i] = randomNumber;
                        }
            }
          } 
         }
        
        duplicate = checkDuplicateSet(numberSet, newSet, num);
        
        if(duplicate == true)
                {
                    System.out.println("Repeat Set. Generate another one.");

                }
        else
                {
                    System.out.println("This set is sucessful");

                }
       
       
        //sorting
        for(int j=0; j<numberSet.length;j++)
            {
             for (int k=0; k<newSet.length-1; k++)
                {    
            
                 duplicate = false;
            
            for ( int i=0; i<newSet.length-k-1; i++)
                 {
               
                if(numberSet[j][i] >= numberSet[j][i+1])
                     {
                        randomNumber = numberSet[j][i];
                        numberSet[j][i] = numberSet[j][i+1];
                        numberSet[j][i+1] = randomNumber;
                        duplicate = true;
                         }
                
                  }
            
            if (duplicate == false) 
               break;
                   }
               }
       
        
        //output
        System.out.println("The Number for the set : ");
        writeSet(numberSet ,newSet ,num);
        System.exit(0);
        
    }

   public static int generateRandomValue()
        {
         return (int) (Math.random()*49) + 1;
         }
   
   public static boolean checkDuplicate( int[] arr, int value,int no)
    {
           
       for (int k=0; k<6 ;k++)
            {
                if (value == arr[k]){
                    return true;
                }
               }     
            
           return false;
      }
    
   public static boolean checkDuplicateSet( int[][] numberSet, int[] newSet,int num)
   {
       boolean duplicate = true;
       
       for(int i=0; i<num;i++)
       {
           duplicate = true;
           
           for (int j=0; j<newSet.length; j++)
                {
                    if(numberSet[i][j] != newSet[j]){
                        duplicate = false;
                        break;
                    }
                  }
           if(duplicate == true)
               {
                    break;
                     }
           
        }
       return duplicate;
   }
   public static void writeSet(int[][] numberSet,int[] newSet, int num)
   {
       try{
            BufferedWriter fout = new BufferedWriter (new FileWriter("marksix.txt"));
        
        for (int i=0; i<num; i++)
            {
            for(int j=0; j<newSet.length; j++)
                {
                    if(j != 0)
                            {
                        System.out.print(j > newSet.length - 1? "\n" : ", "); 
                        fout.write(j > newSet.length - 1? "\n" : ", ");
                              }
                        System.out.print(numberSet[i][j]);
                        fout.write(""+numberSet[i][j]);

                 }
            
            System.out.println();
            fout.newLine();
           }
            
            
        fout.close();
           
       } catch(IOException e)
            {
                System.out.println("File Error: " + e);
            }

   }
   
}


    